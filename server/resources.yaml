Parameters:
  EnvironmentName:
    Description: Environment name will be used in resorces name tags
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to LB
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web App Security Group
      GroupName: web-app-security-group
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - Description: Inbound rule to allow the LB.
          IpProtocol: TCP
          SourceSecurityGroupId: !Ref LBSecGroup
          FromPort: 80
          ToPort: 80

  UdagramS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdagramS3ReadOnlyEC2

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update --yes
          apt-get install --yes unzip awscli apache2
          systemctl start apache2.service
          cd /var/www/html
          rm -rf ./*
          aws s3 cp s3://mostafayasin-dev-landing-page/dev-landing-page.zip ./
          unzip -o dev-landing-page.zip && rm dev-landing-page.zip
          mv dev-landing-page/* ./ && rm -r dev-landing-page/

      ImageId: ami-0729e439b6769d6ab
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  ServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  ServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS
      LaunchConfigurationName: !Ref ServerLaunchConfig
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
        - Ref: ServerTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Instance
          PropagateAtLaunch: true

  ServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN2
      SecurityGroups:
        - Ref: LBSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Load Balancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ServerTargetGroup
      LoadBalancerArn:
        Ref: ServerLoadBalancer
      Port: "80"
      Protocol: HTTP

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "LoadBalancerListener"
      Priority: 1

  CPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ServerAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 75.0

  RequestCountPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ServerAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join
            - "/"
            - - !GetAtt ServerLoadBalancer.LoadBalancerFullName
              - !GetAtt ServerTargetGroup.TargetGroupFullName
        TargetValue: 3
